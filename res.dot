digraph astgraph {
    node [shape=circle, fontsize=12, fontname="Courier", height=.1];
    ranksep=.3;
    edge [arrowsize=.5]
    node1 [label="= BinOp"]
    Program -> node1
    node2 [label="a1"]
    node1 -> node2
    node3 [label="16"]
    node1 -> node3
    node4 [label="= BinOp"]
    Program -> node4
    node5 [label="b2"]
    node4 -> node5
    node6 [label="False"]
    node4 -> node6
    node7 [label="Class Test"]
    Program -> node7
    node8 [label="Args"]
    node7 -> node8
    node9 [label="object"]
    node8 -> node9
    node10 [label="Func main"]
    node7 -> node10
    node11 [label="Args"]
    node10 -> node11
    node12 [label="self"]
    node11 -> node12    node13 [label="a1"]
    node11 -> node13    node14 [label="b2"]
    node11 -> node14    node15 [label="*args"]
    node11 -> node15    node16 [label="**keyargs"]
    node11 -> node16    node17 [label="List"]
    node10 -> node17
    node18 [label="= BinOp"]
    node17 -> node18
    node19 [label="b1"]
    node18 -> node19
    node20 [label="8"]
    node18 -> node20
    node21 [label="= BinOp"]
    node17 -> node21
    node22 [label="res"]
    node21 -> node22
    node23 [label="- BinOp"]
    node21 -> node23
    node24 [label="a1"]
    node23 -> node24
    node25 [label="b1"]
    node23 -> node25
    node26[label="WhileExpr"]
    node17 -> node26
    node27 [label="> BinOp"]
    node26 -> node27
    node28 [label="a1"]
    node27 -> node28
    node29 [label="b1"]
    node27 -> node29
    node30 [label="List"]
    node26 -> node30
    node31 [label="= BinOp"]
    node30 -> node31
    node32 [label="num"]
    node31 -> node32
    node33 [label="23"]
    node31 -> node33
    node34 [label="= BinOp"]
    node30 -> node34
    node35 [label="List"]
    node34 -> node35
    node36 [label="a1"]
    node35 -> node36
    node37 [label="b1"]
    node35 -> node37
    node38 [label="List"]
    node34 -> node38
    node39 [label="b1"]
    node38 -> node39
    node40 [label="a1"]
    node38 -> node40
    node41 [label="= BinOp"]
    node30 -> node41
    node42 [label="my_list"]
    node41 -> node42
    node43 [label="[] UnaryOp"]
    node41 -> node43
    node44 [label="List"]
    node43 -> node44
    node45 [label="6"]
    node44 -> node45
    node46 [label="5"]
    node44 -> node46
    node47 [label="4"]
    node44 -> node47
    node48 [label="= BinOp"]
    node30 -> node48
    node49 [label="result"]
    node48 -> node49
    node50 [label="[] BinOp"]
    node48 -> node50
    node51 [label="my_list"]
    node50 -> node51
    node52 [label=":: BinOp"]
    node50 -> node52
    node53 [label="-1"]
    node52 -> node53
    node54[label="ForExpr"]
    node30 -> node54
    node55 [label="i"]
    node54 -> node55
    node56 [label="my_list"]
    node54 -> node56
    node57 [label="List"]
    node54 -> node57
    node58 [label="IfExpr"]
    node57 -> node58
    node59 [label="IfItem"]
    node58 -> node59
    node60 [label="> BinOp"]
    node59 -> node60
    node61 [label="i"]
    node60 -> node61
    node62 [label="5"]
    node60 -> node62
    node63 [label="-= BinOp"]
    node59 -> node63
    node64 [label="a1"]
    node63 -> node64
    node65 [label="1"]
    node63 -> node65
    node66 [label="+= BinOp"]
    node57 -> node66
    node67 [label="b1"]
    node66 -> node67
    node68 [label="1"]
    node66 -> node68
    node69 [label="= BinOp"]
    node54 -> node69
    node70 [label="c1"]
    node69 -> node70
    node71 [label="a1b1"]
    node69 -> node71
    node72 [label="+= BinOp"]
    node30 -> node72
    node73 [label="a1"]
    node72 -> node73
    node74 [label="1"]
    node72 -> node74
    node75 [label="-= BinOp"]
    node30 -> node75
    node76 [label="b1"]
    node75 -> node76
    node77 [label="1"]
    node75 -> node77
    node78 [label="RET UnaryOp"]
    node17 -> node78
    node79 [label="c1"]
    node78 -> node79
    node80 [label="() BinOp"]
    Program -> node80
    node81 [label="print"]
    node80 -> node81
    node82 [label="Args"]
    node80 -> node82
    node83 [label="hello"]
    node82 -> node83
    node84 [label="TryExpr"]
    Program -> node84
    node85 [label="= BinOp"]
    node84 -> node85
    node86 [label="a"]
    node85 -> node86
    node87 [label="10"]
    node85 -> node87
    node88 [label="ExceptExpr"]
    node84 -> node88
    node89 [label="Exception"]
    node88 -> node89
    node90 [label="= BinOp"]
    node88 -> node90
    node91 [label="b"]
    node90 -> node91
    node92 [label="20"]
    node90 -> node92
    node93 [label="None"]
    node84 -> node93
    node94 [label="None"]
    node84 -> node94
}